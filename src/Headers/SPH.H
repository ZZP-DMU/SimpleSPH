#ifndef __SPH_H__
#define __SPH_H__

/* for fluid particles,they x-direction arrange betweent(0,12-2*PTC_SPACING) */
/* for fluid particles,they y-direction arrange betweent(0,5-2*PTC_SPACING) */
/* for dummy particles,they x-direction arrange betweent (-2*PTC_SPACING,0)and(12-2*PTC_SPACOING,12) */
/* for dummy particles,they y-direction arrange betweent (-2*PTC_SACING,5) */

/* Define Symbols Here*/
#define FLUID_DOMAIN_LENGTH 0.4   //computational domain length
#define FLUID_DOMAIN_DEEPTH 1.0     //computational domain deepth
#define TOL_DOMAIN_LENGTH (FLUID_DOMAIN_LENGTH)
#define TOL_DOMAIN_DEEPTH (FLUID_DOMAIN_DEEPTH*1.5)

#define PTC_SPACING 0.005    //spacing between particles
#define PTC_SML 2*PTC_SPACING    //smoothed leng of particles
#define PTC_REGION_RADIUS (2*PTC_SML) //particle support region radius,which is PTC_SML*2

#define FLUID_LENGTH_NUM (int)(FLUID_DOMAIN_LENGTH/PTC_SPACING+1-8)
#define FLUID_DEEPTH_NUM (int)(FLUID_DOMAIN_DEEPTH/PTC_SPACING+1-4)

#define FLUID_PTC_NUM (FLUID_LENGTH_NUM)*(FLUID_DEEPTH_NUM)  //fluid particles number
//#define SOLID_PTC_NUM  0 //rigid body particles number
#define VIRTUAL_PTC_NUM (int)((FLUID_DOMAIN_DEEPTH/PTC_SPACING+1)*(FLUID_DOMAIN_LENGTH/PTC_SPACING+1)-FLUID_PTC_NUM)  //virtual paritcles number
//#define PTC_TOL_NUM (FLUID_PTC_NUM+SOLID_PTC_NUM+VIRTUAL_PTC_NUM)   //total particles

#define MESH_SPACING (PTC_SPACING*4.0) //mesh spacing
#define MESH_LENGTH_NUM (int)(TOL_DOMAIN_LENGTH/MESH_SPACING) //length-direction mesh number
#define MESH_DEEPTH_NUM (int)(TOL_DOMAIN_DEEPTH/MESH_SPACING) //deepth-direction mesh number
#define MESH_TOL_NUM (MESH_LENGTH_NUM*MESH_DEEPTH_NUM) //total mesh number
#define MESH_PTC_NUM 201 //per mesh grid contain max paticle num

#define REF_DENSITY 1000.0    //reference density for eos
#define GRAVITY_ACC 9.80     //gravity acceleration defin here
#define ART_SOUND_VEL (10*sqrt(GRAVITY_ACC*FLUID_DOMAIN_DEEPTH))  //art_sound_velosity,it's $p=10 \times (\rho-\rho_{ref})$

#define MU 10000 //define the constant viscous

#define TH_NUM 7 //paraller threads
#define INIT_TIME_STEP 2000
#define DELTA_TIME 0.0008
#define PRINT_TIME_STEP 50  //every 50 time step to print

#define PARA (0x01|0x02)
//0x01----------->density
//0x02----------->pressure
//0x04----------->velosity
//0x08----------->acceleration

#define PTC_MASS (REF_DENSITY*pow(PTC_SPACING,3))   //every particle's mass is constant

#define T_START current_time=time(NULL);{ //get start time
#define T_END(a) }cout << a << " use time is " << time(NULL)-current_time << " s" << endl;  //echo used time


// two paritcles distance
#define PTC_DISTANCE(a,b) (sqrt(pow(particle->x[a]-particle->x[b],2)+pow(particle->y[a]-particle->y[b],2)))

#define PI 3.14159265358
#define ALPHA 15.0/(7*PI*pow(PTC_SML,2))

/* Data Structure Declare */
typedef unsigned int*** SPH_MESH;

typedef  struct 
{
    /* declare the position,velosity,pressure,density,type of the particle */
    double *x;  //x coordinations of position
    double *y;  //y coordinations of position
    double *vx; //x-direction velosity
    double *vy; //y-direction velosity
    double *accx;   //x-direction acceleration 
    double *accy;   //y-direction acceleration
    double *pressure;   //pressure of paritcle
    double *density;    //density of particle
    double *dif_density;    //differential density value
    double *visxx;      //x-x direction stress
    double *visyy;      //y-y direction stress
    double *visxy;      //x-y and y-x direction stress
    //double *mass;   //mass of particle
    double *w; //sum of kernel value
    unsigned int total; //total particles number
    char *type; //particle type:0 denote fulid;1 denote rigid;-1 denote dummy particles
}SPH_PARTICLE;

typedef struct 
{
    /* declare the kernel and differential kernel value of each pair */
    double *w;  //kernel value
    double *dwdx;   //differential kernel value in x-direction
    double *dwdy;   //differential kernel value in y-direction
}SPH_KERNEL;


typedef struct 
{
    /* particle pare generated by NNPS algorithm */
    unsigned int total;
    unsigned int *i;
    unsigned int *j;
}SPH_PAIR;


typedef struct 
{
    /* rigid body kinematics information */
    double vx;  //rigid body x-direction velocity
    double vy;  //rigid body y-direction velocity
    double omega;   //rigid body angular velocity
    double accx;    //rigid body x-direciton acceleration
    double accy;    //rigid body y-direction acceleration
    double alpha;   //rigid body angular acceleration
    double cogx;    //x-direction center of gravity coordinate
    double cogy;    //y-direction center of gravity coordinate 
    double mass;    //rigid body mass 
    double moi;     //rigid body moment of inertia
    double total;   //rigid body ptc num
}SPH_RIGID;



typedef struct 
{
    /* SPH Program Struct */
    SPH_PARTICLE *particle;
    SPH_RIGID *rigid_0;
    SPH_RIGID *rigid_1;
    SPH_PAIR *pair;
    SPH_KERNEL *kernel;
    SPH_MESH mesh;

    //current time step
    int step;

    //time step size
    double d_time;
    
    //current process flags
    char flag;  // if rigid_1 body involves
}SPH;

/* Headers Include Here*/
//#include <omp.h>
#include "Lib.H"
#include "PreProcess.H"
#include "PostProcess.H"
#include "Equations.H"

/* Extern Functions Here*/
void ptc_time_integral(SPH *);

#endif
